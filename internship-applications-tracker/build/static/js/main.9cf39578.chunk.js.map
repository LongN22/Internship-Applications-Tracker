{"version":3,"sources":["JobList.js","Firebase.js","App.js","reportWebVitals.js","index.js"],"names":["JobList","input","List","ListItem","ListItemText","primary","text","require","config","db","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","path","App","useState","jobList","setJobList","setInput","console","log","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","position","className","FormControl","InputLabel","Input","value","onChange","event","target","Button","disabled","onClick","add","timestamp","Firebase","FieldValue","serverTimestamp","variant","color","list","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAeeA,MAVf,SAAiBC,GACb,OACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAcC,QAASJ,EAAMK,Y,gDCR7CC,EAAQ,IAAUC,SAElB,IAWeC,EAXKC,IAASC,cAAc,CACvCC,OAAQC,0CACRC,WAAYD,qCACZE,UAAWF,qBACXG,cAAeH,iCACfI,kBAAmBJ,eACnBK,MAAOL,8CAGYM,YCNvBZ,EAAQ,IAAUC,OAAO,CAACY,KAAM,UAwDjBC,MApDf,WAQE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOrB,EAAP,KAAcwB,EAAd,KAsBA,OArBAC,QAAQC,IAAI1B,GAGZ2B,qBAAU,WACRnB,EAAGoB,WAAW,WAAWC,QAAQ,aAAaC,YAAW,SAAAC,GACvDN,QAAQC,IAAIK,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAOC,aAChDb,EAAWQ,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAOC,kBAEhD,IAcD,sBAAKC,UAAU,MAAf,UACE,iEACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,uBACA,cAACC,EAAA,EAAD,CAAOC,MAAOzC,EAAO0C,SAAU,SAAAC,GAAK,OAAInB,EAASmB,EAAMC,OAAOH,aAEhE,cAACI,EAAA,EAAD,CAAQC,UAAW9C,EAAO+C,QAlBf,SAACJ,GACdlB,QAAQC,IAAI,SAEZlB,EAAGoB,WAAW,WAAWoB,IAAI,CAC3BZ,SAAUpC,EACViD,UAAWC,IAAShC,UAAUiC,WAAWC,oBAG3C5B,EAAS,KAUoC6B,QAAQ,YAAYC,MAAM,UAArE,iBAIA,6BACGhC,EAAQW,KAAI,SAAAsB,GAAI,OACf,cAAC,EAAD,CAASlD,KAAMkD,aC1CVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9cf39578.chunk.js","sourcesContent":["import React from 'react'\nimport { List, ListItem, ListItemText } from '@material-ui/core';\n\n// rfce: shortcut for creation\n\nfunction JobList(input) {\n    return (\n        <List>\n            <ListItem>\n                <ListItemText primary={input.text} />\n            </ListItem>\n        </List>\n    )\n}\n\nexport default JobList\n","import firebase from 'firebase';\nrequire('dotenv').config();\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, { useState, useEffect } from 'react';\nimport JobList from './JobList';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport './App.css';\nimport db from './Firebase'\nimport Firebase from 'firebase'\nrequire('dotenv').config({path: '/.env'})\n\n\n\nfunction App() {\n  /*  \n    Note: JSX (Javascript + HTML)\n    E.g: <h1>Hello world {1+1}</h1>\n      Output = Hello world 2\n  */\n\n  // Array of jobs (short-term storage. Resets after refresh)\n  const [jobList, setJobList] = useState([]);\n  const [input, setInput] = useState('');\n  console.log(input);\n\n  // Load database from Firebase\n  useEffect(() => {\n    db.collection('jobList').orderBy('timestamp').onSnapshot(snapshot => {\n      console.log(snapshot.docs.map(doc => doc.data().position));\n      setJobList(snapshot.docs.map(doc => doc.data().position));\n    })\n  }, []);\n\n  const addJob = (event) => {\n    console.log('added');\n    // Push input into jobList\n    db.collection('jobList').add({\n      position: input,\n      timestamp: Firebase.firestore.FieldValue.serverTimestamp()\n    })\n    // Clears input box after submission\n    setInput('');\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1>Internship Applications Tracker</h1>\n      <FormControl>\n        <InputLabel>Position</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n      </FormControl>\n      <Button disabled={!input} onClick={addJob} variant=\"contained\" color=\"primary\">\n      Add\n      </Button>\n\n      <ul>\n        {jobList.map(list => (\n          <JobList text={list}/>\n        ))}\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}