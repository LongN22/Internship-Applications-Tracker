{"version":3,"sources":["Firebase.js","Job.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","db","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Job","props","List","ListItem","ListItemText","primary","job","position","status","Button","onClick","event","collection","doc","id","delete","path","App","useState","jobList","setJobList","input","setInput","console","log","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","className","FormControl","InputLabel","Input","value","onChange","target","disabled","add","timestamp","Firebase","FieldValue","serverTimestamp","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTACAA,EAAQ,IAAUC,SAElB,IAWeC,EAXKC,IAASC,cAAc,CACvCC,OAAQC,0CACRC,WAAYD,qCACZE,UAAWF,qBACXG,cAAeH,iCACfI,kBAAmBJ,eACnBK,MAAOL,8CAGYM,Y,QCSRC,MAdf,SAAaC,GAET,OACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAcC,QAASJ,EAAMK,IAAIC,WACjC,cAACH,EAAA,EAAD,CAAcC,QAASJ,EAAMK,IAAIE,YAErC,cAACC,EAAA,EAAD,CAAQC,QAAS,SAAAC,GAAK,OAAItB,GAA1B,oBACA,cAAC,IAAD,CAAmBqB,QAAS,SAAAC,GAAK,OAAItB,EAAGuB,WAAW,WAAWC,IAAIZ,EAAMK,IAAIQ,IAAIC,gB,gCCV5F5B,EAAQ,IAAUC,OAAO,CAAC4B,KAAM,UAyDjBC,MArDf,WAQE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAuBA,OAtBAC,QAAQC,IAAIH,GAGZI,qBAAU,WACRpC,EAAGuB,WAAW,WAAWc,QAAQ,aAAaC,YAAW,SAAAC,GACvDL,QAAQC,IAAII,EAASC,KAAKC,KAAI,SAAAjB,GAAG,OAAIA,EAAIkB,OAAOxB,aAChDa,EAAWQ,EAASC,KAAKC,KAAI,SAAAjB,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIP,SAAUM,EAAIkB,OAAOxB,SAAUC,OAAQK,EAAIkB,OAAOvB,iBAErG,IAeD,sBAAKwB,UAAU,MAAf,UACE,iEACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,uBACA,cAACC,EAAA,EAAD,CAAOC,MAAOf,EAAOgB,SAAU,SAAA1B,GAAK,OAAIW,EAASX,EAAM2B,OAAOF,aAEhE,cAAC3B,EAAA,EAAD,CAAQ8B,UAAWlB,EAAOX,QAnBf,SAACC,GACdY,QAAQC,IAAI,SAEZnC,EAAGuB,WAAW,WAAW4B,IAAI,CAC3BjC,SAAUc,EACVoB,UAAWC,IAAS3C,UAAU4C,WAAWC,kBACzCpC,OAAQ,YAGVc,EAAS,KAUoCuB,QAAQ,YAAYC,MAAM,UAArE,iBAIA,6BACG3B,EAAQW,KAAI,SAAAX,GAAO,OAClB,cAAC,EAAD,CAAKb,IAAKa,aC3CL4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a7ac230.chunk.js","sourcesContent":["import firebase from 'firebase';\nrequire('dotenv').config();\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React from 'react'\nimport { List, ListItem, ListItemText, Button } from '@material-ui/core';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport db from './Firebase';\n\n// rfce: shortcut for creation\n\nfunction Job(props) {\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText primary={props.job.position}/>\n                <ListItemText primary={props.job.status}/>\n            </ListItem>\n            <Button onClick={event => db}>change</Button>\n            <DeleteForeverIcon onClick={event => db.collection('jobList').doc(props.job.id).delete()}/>\n        </List>\n    )\n}\n\nexport default Job\n","import React, { useState, useEffect } from 'react';\nimport Job from './Job';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport './App.css';\nimport db from './Firebase'\nimport Firebase from 'firebase'\nrequire('dotenv').config({path: '/.env'})\n\n\n\nfunction App() {\n  /*  \n    Note: JSX (Javascript + HTML)\n    E.g: <h1>Hello world {1+1}</h1>\n      Output = Hello world 2\n  */\n\n  // Array of jobs (short-term storage. Resets after refresh)\n  const [jobList, setJobList] = useState([]);\n  const [input, setInput] = useState('');\n  console.log(input);\n\n  // Load database from Firebase\n  useEffect(() => {\n    db.collection('jobList').orderBy('timestamp').onSnapshot(snapshot => {\n      console.log(snapshot.docs.map(doc => doc.data().position));\n      setJobList(snapshot.docs.map(doc => ({id: doc.id, position: doc.data().position, status: doc.data().status})));\n    })\n  }, []);\n\n  const addJob = (event) => {\n    console.log('added');\n    // Push input into jobList\n    db.collection('jobList').add({\n      position: input,\n      timestamp: Firebase.firestore.FieldValue.serverTimestamp(),\n      status: 'Applied'\n    })\n    // Clears input box after submission\n    setInput('');\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1>Internship Applications Tracker</h1>\n      <FormControl>\n        <InputLabel>Position</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n      </FormControl>\n      <Button disabled={!input} onClick={addJob} variant=\"contained\" color=\"primary\">\n      Add\n      </Button>\n      \n      <ul>\n        {jobList.map(jobList => (\n          <Job job={jobList}/>\n        ))}\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}