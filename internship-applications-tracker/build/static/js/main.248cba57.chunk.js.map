{"version":3,"sources":["Firebase.js","Job.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","db","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","Job","props","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","style","maxWidth","job","position","description","onClick","event","collection","doc","id","delete","path","App","useState","jobList","setJobList","setPosition","setDescription","pay","setPay","company","setCompany","console","log","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","status","className","FormControl","InputLabel","Input","value","onChange","target","Button","disabled","add","Firebase","FieldValue","serverTimestamp","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.248cba57.chunk.js","sourcesContent":["import firebase from 'firebase';\nrequire('dotenv').config();\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n    appId: process.env.REACT_APP_appId\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React from 'react'\nimport { List, ListItem, ListItemText, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, DataGrid } from '@material-ui/core';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport db from './Firebase';\n\n// rfce: shortcut for creation\n\n/* <List >\n            <ListItem divider={true} dense={true}>\n                <ListItemText primary={props.job.position} secondary={props.job.company}/>\n                <ListItemText primary={props.job.description}/>\n\n                <ListItemText primary={props.job.pay}/>\n                <DeleteForeverIcon onClick={event => db.collection('jobList').doc(props.job.id).delete()}/>\n\n            </ListItem>\n            \n        </List> */\n\n\n\n\nfunction Job(props) {\n\n    return (\n    <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>Position</TableCell>\n                    <TableCell>Description</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                <TableRow key={props.job.position}>\n                    <TableCell style={{ maxWidth: 0}}>\n                        {props.job.position}\n                    </TableCell>\n                    <TableCell style={{ maxWidth: 0}}>\n                        {props.job.description}\n                    </TableCell>\n                    <DeleteForeverIcon onClick={event => db.collection('jobList').doc(props.job.id).delete()}/>\n                </TableRow>\n            </TableBody>\n        </Table>\n    </TableContainer>\n    )\n}\n\nexport default Job\n","import React, { useState, useEffect } from 'react';\nimport Job from './Job';\nimport { Button, FormControl, Input, InputLabel, TableCell, TableContainer, Paper, Table, TableHead, TableRow } from '@material-ui/core';\nimport './App.css';\nimport db from './Firebase'\nimport Firebase from 'firebase'\nrequire('dotenv').config({path: '/.env'})\n\n\n\nfunction App() {\n  /*  \n    Note: JSX (Javascript + HTML)\n    E.g: <h1>Hello world {1+1}</h1>\n      Output = Hello world 2\n  */\n\n  // Array of jobs (short-term storage. Resets after refresh)\n  const [jobList, setJobList] = useState([]);\n  const [position, setPosition] = useState('');\n  const [description, setDescription] = useState('');\n  const [pay, setPay] = useState('');\n  const [company, setCompany] = useState('');\n\n\n  console.log(position);\n\n  // Load database from Firebase\n  useEffect(() => {\n    db.collection('jobList').orderBy('timestamp').onSnapshot(snapshot => {\n      console.log(snapshot.docs.map(doc => doc.data().position));\n      setJobList(snapshot.docs.map(doc => ({id: doc.id, position: doc.data().position, status: doc.data().status, description: doc.data().description, pay: doc.data().pay, company: doc.data().company})));\n    })\n  }, []);\n\n  const addJob = (event) => {\n    console.log('added');\n    // Push input into jobList\n    db.collection('jobList').add({\n      position: position,\n      description: description,\n      pay: pay,\n      company, company,\n      timestamp: Firebase.firestore.FieldValue.serverTimestamp(),\n      status: 'Applied'\n    })\n    // Clears input box after submission\n    setPosition('');\n    setDescription('');\n    setPay('');\n    setCompany('');\n  }\n\n\n  \n  return (\n    <div className=\"App\">\n      <h1>Internship Applications Tracker</h1>\n      <FormControl>\n        <InputLabel>Position</InputLabel>\n        <Input value={position} onChange={event => setPosition(event.target.value)}/>\n      </FormControl>\n\n      <FormControl>\n      <InputLabel>Company</InputLabel>\n      <Input value={company} onChange={event => setCompany(event.target.value)}/>\n      </FormControl>\n\n      <FormControl>\n      <InputLabel>Description</InputLabel>\n      <Input value={description} onChange={event => setDescription(event.target.value)}/>\n      </FormControl>\n\n      <FormControl>\n      <InputLabel>Pay</InputLabel>\n      <Input value={pay} onChange={event => setPay(event.target.value)}/>\n      </FormControl>\n\n      <Button disabled={!position} onClick={addJob} variant=\"contained\" color=\"primary\">\n      Add\n      </Button>\n\n      \n      <ul>\n        {jobList.map(jobList => (\n          <Job job={jobList}/>\n        ))}\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}